/*
###############################################################
#  Generated by:      Cadence Innovus 19.10-p002_1
#  OS:                Linux x86_64(Host ID srv-eda-04)
#  Generated on:      Wed May 25 01:22:30 2022
#  Design:            top
#  Command:           saveNetlist top.v
###############################################################
*/
// Generated by Cadence Genus(TM) Synthesis Solution 19.10-p002_1
// Generated on: May 24 2022 21:09:23 MSK (May 24 2022 18:09:23 UTC)
// Verification Directory fv/commutator 
module commutator (
	inputs, 
	control, 
	clk, 
	outputs);
   input [7:0] inputs;
   input [2:0] control;
   input [2:0] clk;
   output [2:0] outputs;

   // Internal wires
   wire [8:0] mem_out;
   wire UNCONNECTED;
   wire UNCONNECTED0;
   wire UNCONNECTED1;
   wire UNCONNECTED2;
   wire UNCONNECTED3;
   wire UNCONNECTED4;
   wire UNCONNECTED5;
   wire UNCONNECTED6;
   wire UNCONNECTED7;
   wire n_0;
   wire n_1;
   wire n_2;
   wire n_3;
   wire n_4;
   wire n_5;

   MX2X1 g752 (.Y(outputs[2]),
	.A(n_0),
	.B(n_2),
	.S0(mem_out[8]));
   MX2X1 g753 (.Y(outputs[1]),
	.A(n_3),
	.B(n_5),
	.S0(mem_out[5]));
   MX2X1 g754 (.Y(outputs[0]),
	.A(n_4),
	.B(n_1),
	.S0(mem_out[1]));
   MX4XL g756 (.Y(n_5),
	.A(inputs[1]),
	.B(inputs[5]),
	.C(inputs[3]),
	.D(inputs[7]),
	.S0(mem_out[3]),
	.S1(mem_out[4]));
   MX4XL g757 (.Y(n_4),
	.A(inputs[0]),
	.B(inputs[1]),
	.C(inputs[4]),
	.D(inputs[5]),
	.S0(mem_out[2]),
	.S1(mem_out[0]));
   MX4XL g759 (.Y(n_3),
	.A(inputs[0]),
	.B(inputs[4]),
	.C(inputs[2]),
	.D(inputs[6]),
	.S0(mem_out[3]),
	.S1(mem_out[4]));
   MX4XL g755 (.Y(n_2),
	.A(inputs[1]),
	.B(inputs[5]),
	.C(inputs[3]),
	.D(inputs[7]),
	.S0(mem_out[6]),
	.S1(mem_out[7]));
   MX4XL g760 (.Y(n_1),
	.A(inputs[2]),
	.B(inputs[6]),
	.C(inputs[3]),
	.D(inputs[7]),
	.S0(mem_out[0]),
	.S1(mem_out[2]));
   MX4XL g758 (.Y(n_0),
	.A(inputs[0]),
	.B(inputs[2]),
	.C(inputs[4]),
	.D(inputs[6]),
	.S0(mem_out[7]),
	.S1(mem_out[6]));
   TLATX1 dd0_dd0_dd1_q_reg (.Q(mem_out[1]),
	.QN(UNCONNECTED),
	.D(control[1]),
	.G(clk[0]));
   TLATX1 dd0_dd1_dd2_q_reg (.Q(mem_out[5]),
	.QN(UNCONNECTED0),
	.D(control[2]),
	.G(clk[1]));
   TLATX1 dd0_dd2_dd2_q_reg (.Q(mem_out[8]),
	.QN(UNCONNECTED1),
	.D(control[2]),
	.G(clk[2]));
   TLATX1 dd0_dd1_dd0_q_reg (.Q(mem_out[3]),
	.QN(UNCONNECTED2),
	.D(control[0]),
	.G(clk[1]));
   TLATX1 dd0_dd2_dd1_q_reg (.Q(mem_out[7]),
	.QN(UNCONNECTED3),
	.D(control[1]),
	.G(clk[2]));
   TLATX1 dd0_dd1_dd1_q_reg (.Q(mem_out[4]),
	.QN(UNCONNECTED4),
	.D(control[1]),
	.G(clk[1]));
   TLATX1 dd0_dd0_dd0_q_reg (.Q(mem_out[0]),
	.QN(UNCONNECTED5),
	.D(control[0]),
	.G(clk[0]));
   TLATX1 dd0_dd0_dd2_q_reg (.Q(mem_out[2]),
	.QN(UNCONNECTED6),
	.D(control[2]),
	.G(clk[0]));
   TLATX1 dd0_dd2_dd0_q_reg (.Q(mem_out[6]),
	.QN(UNCONNECTED7),
	.D(control[0]),
	.G(clk[2]));
endmodule

module top (
	input0, 
	input1, 
	input2, 
	input3, 
	input4, 
	input5, 
	input6, 
	input7, 
	control0, 
	control1, 
	control2, 
	clk0, 
	clk1, 
	clk2, 
	output0, 
	output1, 
	output2);
   input input0;
   input input1;
   input input2;
   input input3;
   input input4;
   input input5;
   input input6;
   input input7;
   input control0;
   input control1;
   input control2;
   input clk0;
   input clk1;
   input clk2;
   output output0;
   output output1;
   output output2;

   // Internal wires
   wire [2:0] clk;
   wire [2:0] control;
   wire [7:0] inputs;
   wire [2:0] outputs;
   wire vddc;
   wire vddo;
   wire vssc;
   wire vsso;

   commutator dd0 (.inputs(inputs),
	.control(control),
	.clk(clk),
	.outputs(outputs));
   PADDI pad_clk0 (.Y(clk[0]),
	.PAD(clk0),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_clk1 (.Y(clk[1]),
	.PAD(clk1),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_clk2 (.Y(clk[2]),
	.PAD(clk2),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_control0 (.Y(control[0]),
	.PAD(control0),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_control1 (.Y(control[0]),
	.PAD(control1),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_control2 (.Y(control[0]),
	.PAD(control2),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input0 (.Y(inputs[0]),
	.PAD(input0),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input1 (.Y(inputs[1]),
	.PAD(input1),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input2 (.Y(inputs[2]),
	.PAD(input2),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input3 (.Y(inputs[3]),
	.PAD(input3),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input4 (.Y(inputs[4]),
	.PAD(input4),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input5 (.Y(inputs[5]),
	.PAD(input5),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input6 (.Y(inputs[6]),
	.PAD(input6),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDI pad_input7 (.Y(inputs[7]),
	.PAD(input7),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDO pad_output0 (.PAD(output0),
	.A(outputs[0]),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDO pad_output1 (.PAD(output1),
	.A(outputs[1]),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADDO pad_output2 (.PAD(output2),
	.A(outputs[2]),
	.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADVDD pad_vdd1 (.VSSIOR(vsso),
	.VDDIOR(vddo),
	.VDD(vddc));
   PADVDD pad_vdd2 (.VSSIOR(vsso),
	.VDDIOR(vddo),
	.VDD(vddc));
   PADVDD pad_vss1 (.VSSIOR(vsso),
	.VSS(vssc),
	.VDDIOR(vddo));
   PADVDD pad_vss2 (.VSSIOR(vsso),
	.VSS(vssc),
	.VDDIOR(vddo));
   PADVDDIOR pad_vddior (.VSSIOR(vsso),
	.VDDIOR(vddo));
   PADVSSIOR pad_vssior (.VSSIOR(vsso),
	.VDDIOR(vddo));
endmodule

